runApp(view_dataset(vdata, addons, useModal = FALSE))
Compute_PCA_dim()
rv.pca$PCA_varScale
source("~/GitHub/omXplore/R/omXplore_pca.R")
runApp(view_dataset(vdata, addons, useModal = FALSE))
wrapper_pca(
qdata = rv.pca$data,
group = get_group(rv.pca$obj),
var.scaling = rv.pca$PCA_varScale,
ncp = Compute_PCA_dim()
)
runApp(view_dataset(vdata, addons, useModal = FALSE))
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
runApp(view_dataset(vdata, addons, useModal = FALSE))
source("~/GitHub/omXplore/R/omXplore_pca.R")
?fviz_pca_var
runApp(view_dataset(vdata, addons, useModal = FALSE))
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
shiny::runApp(omXplore_pca(vdata, 1))
library(shinydashboardPlus)
shiny::runApp(omXplore_pca(vdata, 1))
source("~/GitHub/omXplore/R/omXplore_pca.R")
shiny::runApp(omXplore_pca(vdata, 1))
shiny::runApp(omXplore_pca(vdata, 1))
source("~/GitHub/omXplore/R/omXplore_pca.R")
shiny::runApp(omXplore_pca(vdata, 1))
library(shinydashboard)
shiny::runApp(omXplore_pca(vdata, 1))
source("~/GitHub/omXplore/R/omXplore_pca.R")
shiny::runApp(omXplore_pca(vdata, 1))
data(vdata)
addons <- list(omXplore = c("extFoo1", "extFoo2"))
runApp(view_dataset(vdata, addons, useModal = FALSE))
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
runApp(view_dataset(vdata, addons, useModal = FALSE))
source("~/GitHub/omXplore/R/omXplore_pca.R")
shinyDashboard::useShinydashboard()
source("~/GitHub/omXplore/R/omXplore_pca.R")
?useShinydashboard
library(shinyWidgets)
?useShinydashboard
useShinydashboard
source("~/GitHub/omXplore/R/omXplore_pca.R")
runApp(view_dataset(vdata, addons, useModal = FALSE))
devtools::install_github("RinteRface/tablerDash")
library(bs4Dash)
bs4DashGallery()
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
runApp(view_dataset(vdata, addons, useModal = FALSE))
shinyApp(
ui = dashboardPage(
header = dashboardHeader(),
body = dashboardBody(
box(
title = "Update box sidebar",
closable = TRUE,
width = 12,
height = "500px",
solidHeader = FALSE,
collapsible = TRUE,
actionButton("update", "Toggle card sidebar"),
sidebar = boxSidebar(
id = "mycardsidebar",
width = 25,
sliderInput(
"obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500
)
),
plotOutput("distPlot")
)
),
sidebar = dashboardSidebar()
),
server = function(input, output, session) {
observe(print(input$mycardsidebar))
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
observeEvent(input$update, {
updateBoxSidebar("mycardsidebar")
})
}
)
shinyApp(
ui = dashboardPage(
#header = dashboardHeader(),
body = dashboardBody(
box(
title = "Update box sidebar",
closable = TRUE,
width = 12,
height = "500px",
solidHeader = FALSE,
collapsible = TRUE,
actionButton("update", "Toggle card sidebar"),
sidebar = boxSidebar(
id = "mycardsidebar",
width = 25,
sliderInput(
"obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500
)
),
plotOutput("distPlot")
)
)
#sidebar = dashboardSidebar()
),
server = function(input, output, session) {
observe(print(input$mycardsidebar))
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
observeEvent(input$update, {
updateBoxSidebar("mycardsidebar")
})
}
)
shinyApp(
ui = dashboardPage(
header = NULL,
body = dashboardBody(
box(
title = "Update box sidebar",
closable = TRUE,
width = 12,
height = "500px",
solidHeader = FALSE,
collapsible = TRUE,
actionButton("update", "Toggle card sidebar"),
sidebar = boxSidebar(
id = "mycardsidebar",
width = 25,
sliderInput(
"obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500
)
),
plotOutput("distPlot")
)
),
#sidebar = NULL
),
server = function(input, output, session) {
observe(print(input$mycardsidebar))
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
observeEvent(input$update, {
updateBoxSidebar("mycardsidebar")
})
}
)
shinyApp(
ui = dashboardPage(
header = NULL,
body = dashboardBody(
box(
title = "Update box sidebar",
closable = TRUE,
width = 12,
height = "500px",
solidHeader = FALSE,
collapsible = TRUE,
actionButton("update", "Toggle card sidebar"),
sidebar = boxSidebar(
id = "mycardsidebar",
width = 25,
sliderInput(
"obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500
)
),
plotOutput("distPlot")
)
),
#sidebar = NULL
),
server = function(input, output, session) {
observe(print(input$mycardsidebar))
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
observeEvent(input$update, {
updateBoxSidebar("mycardsidebar")
})
}
)
shinyApp(
ui = dashboardPage(
header = dashboardHeader(
visible = FALSE
),
body = dashboardBody(
box(
title = "Update box sidebar",
closable = TRUE,
width = 12,
height = "500px",
solidHeader = FALSE,
collapsible = TRUE,
actionButton("update", "Toggle card sidebar"),
sidebar = boxSidebar(
id = "mycardsidebar",
width = 25,
sliderInput(
"obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500
)
),
plotOutput("distPlot")
)
),
sidebar = dashboardSidebar(visible = FALSE)
),
server = function(input, output, session) {
observe(print(input$mycardsidebar))
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
observeEvent(input$update, {
updateBoxSidebar("mycardsidebar")
})
}
)
shinyWidgets::shinyWidgetsGallery()
library(shiny)
# Define UI ----
ui <- page_fluid(
titlePanel("Basic widgets"),
layout_columns(
col_width = 3,
card(
card_header("Buttons"),
actionButton("action", "Action"),
submitButton("Submit")
),
card(
card_header("Single checkbox"),
checkboxInput("checkbox", "Choice A", value = TRUE)
),
card(
card_header("Checkbox group"),
checkboxGroupInput(
"checkGroup",
"Select all that apply",
choices = list("Choice 1" = 1, "Choice 2" = 2, "Choice 3" = 3),
selected = 1
)
),
card(
card_header("Date input"),
dateInput("date", "Select date", value = "2014-01-01")
),
card(
card_header("Date range input"),
dateRangeInput("dates", "Select dates")
),
card(
card_header("File input"),
fileInput("file", label = NULL)
),
card(
card_header("Help text"),
helpText(
"Note: help text isn't a true widget,",
"but it provides an easy way to add text to",
"accompany other widgets."
)
),
card(
card_header("Numeric input"),
numericInput("num", "Input number", value = 1)
),
card(
card_header("Radio buttons"),
radioButtons(
"radio",
"Select option",
choices = list("Choice 1" = 1, "Choice 2" = 2, "Choice 3" = 3),
selected = 1
)
),
card(
card_header("Select box"),
selectInput(
"select",
"Select option",
choices = list("Choice 1" = 1, "Choice 2" = 2, "Choice 3" = 3),
selected = 1
)
),
card(
card_header("Sliders"),
sliderInput(
"slider1",
"Set value",
min = 0,
max = 100,
value = 50
),
sliderInput(
"slider2",
"Set value range",
min = 0,
max = 100,
value = c(25, 75)
)
),
card(
card_header("Text input"),
textInput("text", label = NULL, value = "Enter text...")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
source("~/GitHub/omXplore/R/omXplore_pca.R")
library(DT)
library(shiny)
library(shinythemes)
library(shinydashboard)
library(shinyWidgets)
ui <- fluidPage(
theme = shinytheme("lumen"),
shinyWidgets::useShinydashboard(),
navbarPage("test theme",
tabPanel("tab1",
mainPanel(width = 12,
fluidRow(
box(width = 12,
title = "title", status = "warning", solidHeader = TRUE,
dataTableOutput(outputId = "tab")
)
)
)
)
)
)
server <- function(input, output, session) {
output$tab <- renderDataTable(mtcars)
}
shinyApp(ui, server)
library(bslib)
library(shiny)
library(bsicons)
install.packages('bsicons')
value_box(
title = "I got",
value = "99 problems",
showcase = bs_icon("music-note-beamed"),
showcase_layout = "top right",
theme = "secondary",
p("bslib ain't one", bs_icon("emoji-smile")),
p("hit me", bs_icon("suit-spade"))
)
library(bslib)
library(shiny)
library(bsicons)
value_box(
title = "I got",
value = "99 problems",
showcase = bs_icon("music-note-beamed"),
showcase_layout = "top right",
theme = "secondary",
p("bslib ain't one", bs_icon("emoji-smile")),
p("hit me", bs_icon("suit-spade"))
)
library(bslib)
library(shiny)
library(htmltools)
library(plotly)
library(leaflet)
install.packages('leaflet')
library(bslib)
library(shiny)
library(htmltools)
library(plotly)
library(leaflet)
plotly_widget <- plot_ly(x = diamonds$cut) %>%
config(displayModeBar = FALSE) %>%
layout(margin = list(t = 0, b = 0, l = 0, r = 0))
leaflet_widget <- leafletOptions(attributionControl = FALSE) %>%
leaflet(options = .) %>%
addTiles()
source("~/GitHub/omXplore/R/omXplore_pca.R")
runApp(view_dataset(vdata, addons, useModal = FALSE))
?card
library(bslisb)
library(bslib)
runApp(view_dataset(vdata, addons, useModal = FALSE))
source("~/GitHub/omXplore/R/omXplore_pca.R")
runApp(view_dataset(vdata, addons, useModal = FALSE))
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
runApp(view_dataset(vdata, addons, useModal = FALSE))
source("~/GitHub/omXplore/R/omXplore_pca.R")
runApp(view_dataset(vdata, addons, useModal = FALSE))
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
runApp(view_dataset(vdata, addons, useModal = FALSE))
source("~/GitHub/omXplore/R/omXplore_PCA_nipals.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
data(Exp1_R25_prot)
data(Exp1_R25_prot, package = 'DaparToolshedData')
sel <- is.na(SummarizedExperiment::assay(Exp1_R25_prot, 1))
SummarizedExperiment::assay(Exp1_R25_prot[[1]])[sel] <- 0
SummarizedExperiment::assay(Exp1_R25_prot[[1]])[1,1] <- NA
shiny::runApp(omXplore_pca(Exp1_R25_prot, 1))
rv.pca$PCA_axes
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
shiny::runApp(omXplore_pca(Exp1_R25_prot, 1))
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
c(NULL, NULL)
c(NA, NA)
source("~/GitHub/omXplore/R/omXplore_pca.R")
shiny::runApp(omXplore_pca(Exp1_R25_prot, 1))
source("~/GitHub/omXplore/R/omXplore_pca.R")
shiny::runApp(omXplore_pca(Exp1_R25_prot, 1))
rv.pca$PCA_axes
length(rv.pca$PCA_axes)
all(is.na(rv.pca$PCA_axes))
is.na(rv.pca$PCA_axes)
all(!is.na(rv.pca$PCA_axes))
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
shiny::runApp(omXplore_pca(Exp1_R25_prot, 1))
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
shiny::runApp(omXplore_pca(Exp1_R25_prot, 1))
rv.pca$obj
rv.pca$data
data(vdata)
sel <- is.na(SummarizedExperiment::assay(vdata, 1))
SummarizedExperiment::assay(vdata[[1]])[sel] <- 0
SummarizedExperiment::assay(vdata[[1]])[1,1] <- NA
shiny::runApp(omXplore_pca(vdata, 1))
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
shiny::runApp(omXplore_pca(vdata, 1))
rv.pca$data
length(which(is.na(rv.pca$data))) == 0
which(is.na(rv.pca$data))
SummarizedExperiment::assay(vdata[[1]])[1,1] <- 0
shiny::runApp(omXplore_pca(vdata, 1))
length(which(is.na(rv.pca$data))) == 0
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
shiny::runApp(omXplore_pca(vdata, 1))
source("~/GitHub/omXplore/R/omXplore_pca.R")
shiny::runApp(omXplore_pca(vdata, 1))
sel <- is.na(SummarizedExperiment::assay(Exp1_R25_prot, 1))
SummarizedExperiment::assay(vdata[[1]])[Exp1_R25_prot] <- 0
SummarizedExperiment::assay(Exp1_R25_prot[[1]])[sel] <- 0
SummarizedExperiment::assay(Exp1_R25_prot[[1]])[1,1] <- NA
shiny::runApp(omXplore_pca(Exp1_R25_prot, 1))
SummarizedExperiment::assay(Exp1_R25_prot[[1]])[1,1] <- 0
shiny::runApp(omXplore_pca(Exp1_R25_prot, 1))
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_PCA_nipals.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_pca.R")
source("~/GitHub/omXplore/R/omXplore_PCA_nipals.R")
shiny::runApp(omXplore_pca(Exp1_R25_prot, 1))
